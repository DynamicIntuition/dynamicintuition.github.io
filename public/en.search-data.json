{"/knowledge/":{"data":{"":"üëã Hello! This is the knowledge base for PLRC projects."},"title":"Knowledge"},"/knowledge/graphor/":{"data":{"":"Graphor is a set of software containing interfaces for representing implicit graphs through specific functional forms and utilities for computing features associated with their vertices for its downstream analysis.\nConcretely, graphor is a Rust library crate which implements a plugin system where actual implementations of implicit graphs can be dynamically linked. So, the Graphor project also maintains packages with graphor pre-baked into them that conveniently expose graphor in useful ways.","primitives#Primitives":"There are two objects in primary focus.\nImplicit Graphs (IGs). Graph representations in terms of an initial vertex $v \\in V$ and a transition function $t : V \\to \\mathcal{P}(V)$. Abstractions: Adjacency-preserving Morphisms (functions) of the form $a : V \\to V‚Äô$, from vertices in a lift $G = (V, E)$ to a possible correspondant $G‚Äô = (V‚Äô, E‚Äô)$. ‚ÑπÔ∏è This is a lot; see this article for a contextualized explanation. Every other library item in graphor is dedicated to efficiently and exhaustively traversing IGs, producing artifacts as a function of (possibly abstracted) graph vertices, and storing them for later analysis.\nAs such, the library is split into 1) traits that represent IGs and abstractions and 2) utilities that consume these definitions in useful ways, supporting different algorithmic procedures. In accordance to the role of Graphor in PLRC‚Äôs project strategy, these are mainly dynamic programming algorithms.","users#Users":"The graphor library crate can be useful in many ways. We will explain this through four different user stories.\nUser 1User 2User 3User 4 Step 1 This is the first step.\nStep 2 This is the second step."},"title":"Graphor"}}